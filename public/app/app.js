!function(){"use strict";angular.module("app.main",["app.routes","app.core"])}(),function(){"use strict";angular.module("app.core",["utilities.api","utilities.exception","utilities.logger","utilities.router"])}(),function(){"use strict";angular.module("app.routes",["app.schedule.routes","utilities.router"])}(),function(){"use strict";angular.module("utilities.api",[])}(),function(){"use strict";angular.module("utilities.exception",["utilities.logger"])}(),function(){"use strict";angular.module("utilities.logger",[])}(),function(){"use strict";angular.module("utilities.router",["ui.router"])}(),function(){"use strict";angular.module("app.data.schedule",["app.core"])}(),function(){"use strict";angular.module("app.schedule.routes",["ui.router","app.activities.widgets"])}(),function(){"use strict";angular.module("app.activities.widgets",["app.data.schedule"])}(),function(){"use strict";angular.module("app.places.activitysessions",[])}(),function(){"use strict";function t(t){t.options.timeOut=4e3,t.options.positionClass="toast-bottom-right"}function e(t){t.debugEnabled&&t.debugEnabled(!0)}function i(t){t.configure("[NG-JP Error] ")}function n(){}angular.module("app.core").config(t).config(e).config(i).run(n),t.$inject=["toastr"],e.$inject=["$logProvider"],i.$inject=["exceptionHandlerProvider"],n.$inject=["routerService"]}(),function(){"use strict";function t(t,e){e.parent="",t.state(e)}angular.module("app.routes").config(t),t.$inject=["$stateProvider","SCHEDULE_ROOT_ROUTE"]}(),function(){"use strict";function t(t,e){function i(t){return t.load()}var n=e.name;t.state({name:"activities",parent:n,url:"/",templateUrl:"app/components/schedule/widgets/activities/activities.tmpl.html",controller:"ActivityCtrl",controllerAs:"vm",resolve:{dataService:i}}),i.$inject=["activitiesDataService"]}angular.module("app.schedule.routes").config(t),t.$inject=["$stateProvider","SCHEDULE_ROOT_ROUTE"]}(),function(){"use strict";angular.module("app.core").constant("toastr",toastr)}(),function(){"use strict";angular.module("utilities.api").constant("API_CONFIG",{BASE_ROUTE:"api"})}(),function(){"use strict";angular.module("utilities.api").constant("API_ROUTES_CONFIG",{DROPINS:"dropins"})}(),function(){"use strict";angular.module("app.schedule.routes").constant("SCHEDULE_ROOT_ROUTE",{"abstract":!0,name:"schedule",url:"/schedule",template:"<div ui-view></div>"})}(),function(){"use strict"}(),function(){"use strict";function t(t){function e(){i.activities=t.dropinActivities}var i=this;e()}function e(t){return t.getDropins()}angular.module("app.activities.widgets").controller("ActivityCtrl",t),t.$inject=["dataService"],t.resolve={activities:e},e.$inject=["scheduleService"]}(),function(){"use strict";function t(t){function e(){t.activitySessions=activitySessions}e()}angular.module("app.places.activitysessions").controller("ActivitySessionCtrl",t),t.$inject=["$scope","activitySessions"]}(),function(){"use strict";function t(t,e){function i(i,n){n||(n={}),t.post(e.BASE_ROUTE+"/"+i,n)}function n(i){return t.get(e.BASE_ROUTE+"/"+i).then(function(t){return t.data})}return{get:n,post:i}}angular.module("utilities.api").factory("apiService",t),t.$inject=["$http","API_CONFIG"]}(),function(){"use strict";function t(t){function e(e){return function(i){t.error(e,i)}}var i={catcher:e};return i}angular.module("utilities.exception").factory("exceptionService",t),t.$inject=["loggerService"]}(),function(){"use strict";function t(t,e){function i(i,n,r){e.error(i,r),t.error("Error: "+i,n)}function n(i,n,r){e.info(i,r),t.info("Info: "+i,n)}function r(i,n,r){e.success(i,r),t.info("Success: "+i,n)}function o(i,n,r){e.warning(i,r),t.warn("Warning: "+i,n)}var c={showToasts:!0,error:i,info:n,success:r,warning:o,log:t.log};return c}angular.module("utilities.logger").factory("loggerService",t),t.$inject=["$log","toastr"]}(),function(){"use strict";function t(t,e,i){function n(){c(),o(),r()}function r(){e.$on("$stateNotFound",function(t,e,n){if(!u){a.errors++,u=!0;var r="[State not found] Error routing to "+e.to+" from "+n.parent+"."+n.name+".";i.warning(r),s()}})}function o(){e.$on("$stateChangeSuccess",function(){a.changes++,u=!1})}function c(){e.$on("$stateChangeError",function(t,e,n,r,o,c){if(!u){a.errors++,u=!0;var l="[State Routing Error] Error routing to "+e+" from "+r+". Error: "+c;i.warning(l,[c]),s()}})}var u=!1,a={errors:0,changes:0},s=function(){t.go(t.$current)};return n(),{goDefaultState:s}}angular.module("utilities.router").factory("routerService",t),t.$inject=["$state","$rootScope","loggerService"]}(),function(){"use strict";function t(t,e,i){function n(n){function r(t){return t}return t.get(e.DROPINS+"/"+n).then(r).catch(i.catcher("XHR Failed for getActivitySessions"))}function r(){function n(t){return t}return t.get(e.DROPINS).then(n).catch(i.catcher("XHR Failed for getDropins"))}return{getDropins:r,getActivitySessions:n}}angular.module("app.data.schedule").factory("scheduleService",t),t.$inject=["apiService","API_ROUTES_CONFIG","exceptionService"]}(),function(){"use strict";function t(t,e){function i(){var i=e.getDropins();return t.all([i]).then(function(t){return{dropinActivities:t[0]}})}return{load:i}}angular.module("app.activities.widgets").factory("activitiesDataService",t),t.$inject=["$q","scheduleService"]}(),function(){"use strict";function t(){this.config={appErrorPrefix:void 0},this.configure=function(t){this.config.appErrorPrefix=t},this.$get=function(){return{config:this.config}}}function e(t){t.decorator("$exceptionHandler",i)}function i(t,e,i){return function(n,r){var o=e.config.appErrorPrefix||"",c={exception:n,cause:r};n.message=o+n.message,t(n,r),i.error(n.message,c)}}angular.module("utilities.exception").provider("exceptionHandler",t).config(e),e.$inject=["$provide"],i.$inject=["$delegate","exceptionHandler","loggerService"]}();
//# sourceMappingURL=data:application/json;base64,