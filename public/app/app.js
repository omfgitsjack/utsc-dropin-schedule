!function(){"use strict";angular.module("app.main",["app.routes","app.core"])}(),function(){"use strict";angular.module("app.core",["utilities.api","utilities.exception","utilities.logger","utilities.router"])}(),function(){"use strict";angular.module("app.routes",["jp.schedule.routes","utilities.router"])}(),function(){"use strict";angular.module("utilities.api",[])}(),function(){"use strict";angular.module("utilities.exception",["utilities.logger"])}(),function(){"use strict";angular.module("utilities.logger",[])}(),function(){"use strict";angular.module("utilities.router",["ui.router"])}(),function(){"use strict";angular.module("jp.schedule.data",["app.core"])}(),function(){"use strict";angular.module("jp.schedule.layouts",[])}(),function(){"use strict";angular.module("jp.schedule.routes",["ui.router","jp.schedule.widgets","jp.schedule.layouts"])}(),function(){"use strict";angular.module("jp.schedule.widgets",["jp.schedule.data"])}(),function(){"use strict";angular.module("app.places.activitysessions",[])}(),function(){"use strict";function t(t){t.options.timeOut=4e3,t.options.positionClass="toast-bottom-right"}function e(t){t.debugEnabled&&t.debugEnabled(!0)}function i(t){t.configure("[NG-JP Error] ")}function n(){}angular.module("app.core").config(t).config(e).config(i).run(n),t.$inject=["toastr"],e.$inject=["$logProvider"],i.$inject=["exceptionHandlerProvider"],n.$inject=["routerService"]}(),function(){"use strict";function t(t,e){e.parent="",t.state(e)}angular.module("app.routes").config(t),t.$inject=["$stateProvider","SCHEDULE_ROOT_ROUTE"]}(),function(){"use strict";function t(t,e){function i(t){return t.load()}var n=e.name;t.state({name:"activities",parent:n,url:"/",templateUrl:"app/components/schedule/layout/schedule-base-layout.html",controller:"ScheduleBaseCtrl",controllerAs:"vm",resolve:{dataService:i}}),i.$inject=["activitiesDataService"]}angular.module("jp.schedule.routes").config(t),t.$inject=["$stateProvider","SCHEDULE_ROOT_ROUTE"]}(),function(){"use strict";angular.module("app.core").constant("toastr",toastr)}(),function(){"use strict";angular.module("utilities.api").constant("API_CONFIG",{BASE_ROUTE:"api"})}(),function(){"use strict";angular.module("utilities.api").constant("API_ROUTES_CONFIG",{DROPINS:"dropins"})}(),function(){"use strict";angular.module("jp.schedule.routes").constant("SCHEDULE_ROOT_ROUTE",{"abstract":!0,name:"schedule",url:"/schedule",template:"<div ui-view></div>"})}(),function(){"use strict"}(),function(){"use strict";function t(){function t(){console.log("init sched base ctrl")}t()}angular.module("jp.schedule.layouts").controller("ScheduleBaseCtrl",t),t.$inject=["dataService"]}(),function(){"use strict";function t(t){function e(){i.activities=t.dropinActivities}var i=this;e()}function e(t){return t.getDropins()}angular.module("jp.schedule.widgets").controller("ActivityCtrl",t),t.$inject=["dataService"],t.resolve={activities:e},e.$inject=["scheduleService"]}(),function(){"use strict";function t(t){function e(){t.activitySessions=activitySessions}e()}angular.module("app.places.activitysessions").controller("ActivitySessionCtrl",t),t.$inject=["$scope","activitySessions"]}(),function(){"use strict";function t(t,e){function i(i,n){n||(n={}),t.post(e.BASE_ROUTE+"/"+i,n)}function n(i){return t.get(e.BASE_ROUTE+"/"+i).then(function(t){return t.data})}return{get:n,post:i}}angular.module("utilities.api").factory("apiService",t),t.$inject=["$http","API_CONFIG"]}(),function(){"use strict";function t(t){function e(e){return function(i){t.error(e,i)}}var i={catcher:e};return i}angular.module("utilities.exception").factory("exceptionService",t),t.$inject=["loggerService"]}(),function(){"use strict";function t(t,e){function i(i,n,r){e.error(i,r),t.error("Error: "+i,n)}function n(i,n,r){e.info(i,r),t.info("Info: "+i,n)}function r(i,n,r){e.success(i,r),t.info("Success: "+i,n)}function o(i,n,r){e.warning(i,r),t.warn("Warning: "+i,n)}var u={showToasts:!0,error:i,info:n,success:r,warning:o,log:t.log};return u}angular.module("utilities.logger").factory("loggerService",t),t.$inject=["$log","toastr"]}(),function(){"use strict";function t(t,e,i){function n(){u(),o(),r()}function r(){e.$on("$stateNotFound",function(t,e,n){if(!c){s.errors++,c=!0;var r="[State not found] Error routing to "+e.to+" from "+n.parent+"."+n.name+".";i.warning(r),a()}})}function o(){e.$on("$stateChangeSuccess",function(){s.changes++,c=!1})}function u(){e.$on("$stateChangeError",function(t,e,n,r,o,u){if(!c){s.errors++,c=!0;var l="[State Routing Error] Error routing to "+e+" from "+r+". Error: "+u;i.warning(l,[u]),a()}})}var c=!1,s={errors:0,changes:0},a=function(){t.go(t.$current)};return n(),{goDefaultState:a}}angular.module("utilities.router").factory("routerService",t),t.$inject=["$state","$rootScope","loggerService"]}(),function(){"use strict";function t(t,e,i){function n(n){function r(t){return t}return t.get(e.DROPINS+"/"+n).then(r).catch(i.catcher("XHR Failed for getActivitySessions"))}function r(){function n(t){return t}return t.get(e.DROPINS).then(n).catch(i.catcher("XHR Failed for getDropins"))}return{getDropins:r,getActivitySessions:n}}angular.module("jp.schedule.data").factory("scheduleService",t),t.$inject=["apiService","API_ROUTES_CONFIG","exceptionService"]}(),function(){"use strict";function t(t,e){function i(){var i=e.getDropins();return t.all([i]).then(function(t){return{dropinActivities:t[0]}})}return{load:i}}angular.module("jp.schedule.widgets").factory("activitiesDataService",t),t.$inject=["$q","scheduleService"]}(),function(){"use strict";function t(){var t={restrict:"E",templateUrl:"app/components/schedule/widgets/activities/activities.tmpl.html"};return t}angular.module("jp.schedule.widgets").directive("schedule",t)}(),function(){"use strict";function t(){this.config={appErrorPrefix:void 0},this.configure=function(t){this.config.appErrorPrefix=t},this.$get=function(){return{config:this.config}}}function e(t){t.decorator("$exceptionHandler",i)}function i(t,e,i){return function(n,r){var o=e.config.appErrorPrefix||"",u={exception:n,cause:r};n.message=o+n.message,t(n,r),i.error(n.message,u)}}angular.module("utilities.exception").provider("exceptionHandler",t).config(e),e.$inject=["$provide"],i.$inject=["$delegate","exceptionHandler","loggerService"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJjb3JlL2NvcmUubW9kdWxlLmpzIiwicm91dGVzL2FwcC1yb3V0ZXMubW9kdWxlLmpzIiwidXRpbGl0aWVzL2FwaS9hcGkubW9kdWxlLmpzIiwidXRpbGl0aWVzL2V4Y2VwdGlvbi9leGNlcHRpb24ubW9kdWxlLmpzIiwidXRpbGl0aWVzL2xvZ2dlci9sb2dnZXIubW9kdWxlLmpzIiwidXRpbGl0aWVzL3JvdXRlci9yb3V0ZXIubW9kdWxlLmpzIiwiY29tcG9uZW50cy9zY2hlZHVsZS9kYXRhL3NjaGVkdWxlLm1vZHVsZS5qcyIsImNvbXBvbmVudHMvc2NoZWR1bGUvbGF5b3V0L3NjaGVkdWxlLWxheW91dC5tb2R1bGUuanMiLCJjb21wb25lbnRzL3NjaGVkdWxlL3JvdXRlcy9zY2hlZHVsZS1yb3V0ZXMubW9kdWxlLmpzIiwiY29tcG9uZW50cy9zY2hlZHVsZS93aWRnZXRzL2FjdGl2aXRpZXMvYWN0aXZpdGllcy5tb2R1bGUuanMiLCJjb21wb25lbnRzL3NjaGVkdWxlL3dpZGdldHMvYWN0aXZpdHktc2Vzc2lvbnMvYWN0aXZpdHlzZXNzaW9ucy5tb2R1bGUuanMiLCJjb3JlL2NvcmUuY29uZmlnLmpzIiwicm91dGVzL2FwcC1yb3V0ZXMuY29uZmlnLmpzIiwiY29tcG9uZW50cy9zY2hlZHVsZS9yb3V0ZXMvc2NoZWR1bGUtcm91dGVzLmNvbmZpZy5qcyIsImNvcmUvY29yZS5jb25zdGFudC5qcyIsInV0aWxpdGllcy9hcGkvYXBpLmNvbnN0YW50LmpzIiwidXRpbGl0aWVzL2FwaS9hcGkucm91dGVzLmNvbnN0YW50LmpzIiwiY29tcG9uZW50cy9zY2hlZHVsZS9yb3V0ZXMvc2NoZWR1bGUtcm9vdC1yb3V0ZS5jb25zdGFudC5qcyIsImxheW91dC9zaGVsbC5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9zY2hlZHVsZS9sYXlvdXQvc2NoZWR1bGUtYmFzZS1sYXlvdXQuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvc2NoZWR1bGUvd2lkZ2V0cy9hY3Rpdml0aWVzL2FjdGl2aXRpZXMuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvc2NoZWR1bGUvd2lkZ2V0cy9hY3Rpdml0eS1zZXNzaW9ucy9hY3Rpdml0eXNlc3Npb25zLmNvbnRyb2xsZXIuanMiLCJ1dGlsaXRpZXMvYXBpL2FwaS5mYWN0b3J5LmpzIiwidXRpbGl0aWVzL2V4Y2VwdGlvbi9leGNlcHRpb24uZmFjdG9yeS5qcyIsInV0aWxpdGllcy9sb2dnZXIvbG9nZ2VyLmZhY3RvcnkuanMiLCJ1dGlsaXRpZXMvcm91dGVyL3JvdXRlci5mYWN0b3J5LmpzIiwiY29tcG9uZW50cy9zY2hlZHVsZS9kYXRhL3NjaGVkdWxlLmZhY3RvcnkuanMiLCJjb21wb25lbnRzL3NjaGVkdWxlL3dpZGdldHMvYWN0aXZpdGllcy9hY3Rpdml0aWVzLmRhdGEuZmFjdG9yeS5qcyIsImNvbXBvbmVudHMvc2NoZWR1bGUvd2lkZ2V0cy9hY3Rpdml0aWVzL2FjdGl2aXRpZXMuZGlyZWN0aXZlLmpzIiwidXRpbGl0aWVzL2V4Y2VwdGlvbi9leGNlcHRpb24taGFuZGxlci5wcm92aWRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQSxXQUNBLFlBS0EsU0FBQSxPQUFBLFlBQ0EsYUFDQSxnQkNSQSxXQUNBLFlBRUEsU0FBQSxPQUFBLFlBU0EsZ0JBQ0Esc0JBQ0EsbUJBQ0Esd0JDZkEsV0FDQSxZQUtBLFNBQUEsT0FBQSxjQUNBLHFCQUNBLHdCQ1JBLFdBQ0EsWUFFQSxTQUFBLE9BQUEsdUJDSEEsV0FDQSxZQUVBLFNBQUEsT0FBQSx1QkFFQSx3QkNMQSxXQUNBLFlBRUEsU0FBQSxPQUFBLDBCQ0hBLFdBQ0EsWUFFQSxTQUFBLE9BQUEsb0JBRUEsaUJDRkEsV0FDQSxZQUVBLFNBQUEsT0FBQSxvQkFDQSxnQkNQQSxXQUNBLFlBRUEsU0FBQSxPQUFBLDZCQ0hBLFdBQ0EsWUFLQSxTQUFBLE9BQUEsc0JBQ0EsWUFDQSxzQkFDQSwyQkNUQSxXQUNBLFlBRUEsU0FBQSxPQUFBLHVC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LEdBdERBLEdBQUEsSUFDQSxZQUFBLEVBRUEsTUFBQSxFQUNBLEtBQUEsRUFDQSxRQUFBLEVBQ0EsUUFBQSxFQUVBLElBQUEsRUFBQSxJQUdBLE9BQUEsR0F0QkEsUUFDQSxPQUFBLG9CQUNBLFFBQUEsZ0JBQUEsa0NDUkEsV0FDQSxZQU9BLFNBQUEsR0FBQSxFQUFBLEVBQUEsR0FpQkEsUUFBQSxLQUNBLElBQ0EsSUFDQSxJQUdBLFFBQUEsS0FDQSxFQUFBLElBQUEsaUJBQ0EsU0FBQSxFQUFBLEVBQUEsR0FDQSxJQUFBLEVBQUEsQ0FHQSxFQUFBLFNBQ0EsR0FBQSxDQUdBLElBQUEsR0FBQSxzQ0FDQSxFQUFBLEdBQUEsU0FBQSxFQUFBLE9BQUEsSUFDQSxFQUFBLEtBQUEsR0FDQSxHQUFBLFFBQUEsR0FDQSxPQUlBLFFBQUEsS0FDQSxFQUFBLElBQUEsc0JBQ0EsV0FDQSxFQUFBLFVBQ0EsR0FBQSxJQUlBLFFBQUEsS0FDQSxFQUFBLElBQUEsb0JBQ0EsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxJQUFBLEVBQUEsQ0FHQSxFQUFBLFNBQ0EsR0FBQSxDQUdBLElBQUEsR0FBQSwwQ0FDQSxFQUFBLFNBQUEsRUFBQSxZQUNBLENBQ0EsR0FBQSxRQUFBLEdBQUEsSUFDQSxPQTlEQSxHQUFBLElBQUEsRUFDQSxHQUNBLE9BQUEsRUFDQSxRQUFBLEdBR0EsRUFBQSxXQUNBLEVBQUEsR0FBQSxFQUFBLFVBS0EsT0FGQSxNQUdBLGVBQUEsR0FuQkEsUUFDQSxPQUFBLG9CQUNBLFFBQUEsZ0JBQUEsd0RDTEEsV0FDQSxZQWNBLFNBQUEsR0FBQSxFQUFBLEVBQUEsR0FZQSxRQUFBLEdBQUEsR0FNQSxRQUFBLEdBQUEsR0FDQSxNQUFBLEdBTkEsTUFBQSxHQUNBLElBQUEsRUFBQSxRQUFBLElBQUEsR0FDQSxLQUFBLEdBQ0EsTUFBQSxFQUFBLFFBQUEsdUNBV0EsUUFBQSxLQU1BLFFBQUEsR0FBQSxHQUNBLE1BQUEsR0FOQSxNQUFBLEdBQ0EsSUFBQSxFQUFBLFNBQ0EsS0FBQSxHQUNBLE1BQUEsRUFBQSxRQUFBLDhCQTdCQSxPQUNBLFdBQUEsRUFDQSxvQkFBQSxHQWhCQSxRQUNBLE9BQUEsb0JBQ0EsUUFBQSxrQkFBQSxzRUNMQSxXQUNBLFlBaUJBLFNBQUEsR0FBQSxFQUFBLEdBV0EsUUFBQSxLQUNBLEdBQUEsR0FBQSxFQUFBLFlBRUEsT0FBQSxHQUFBLEtBQUEsSUFBQSxLQUNBLFNBQUEsR0FDQSxPQUNBLGlCQUFBLEVBQUEsTUFmQSxPQUNBLEtBQUEsR0FkQSxRQUNBLE9BQUEsdUJBQ0EsUUFBQSx3QkFBQSx5Q0NUQSxXQUNBLFlBTUEsU0FBQSxLQUVBLEdBQUEsSUFDQSxTQUFBLElBQ0EsWUFBQSxrRUFHQSxPQUFBLEdBWEEsUUFDQSxPQUFBLHVCQUNBLFVBQUEsV0FBQSxNQ0hBLFdBQ0EsWUFXQSxTQUFBLEtBQ0EsS0FBQSxRQUNBLGVBQUEsUUFHQSxLQUFBLFVBQUEsU0FBQSxHQUNBLEtBQUEsT0FBQSxlQUFBLEdBR0EsS0FBQSxLQUFBLFdBQ0EsT0FBQSxPQUFBLEtBQUEsU0FXQSxRQUFBLEdBQUEsR0FDQSxFQUFBLFVBQUEsb0JBQUEsR0FVQSxRQUFBLEdBQUEsRUFBQSxFQUFBLEdBQ0EsTUFBQSxVQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxPQUFBLGdCQUFBLEdBQ0EsR0FBQSxVQUFBLEVBQUEsTUFBQSxFQUNBLEdBQUEsUUFBQSxFQUFBLEVBQUEsUUFDQSxFQUFBLEVBQUEsR0FVQSxFQUFBLE1BQUEsRUFBQSxRQUFBLElBeERBLFFBQ0EsT0FBQSx1QkFDQSxTQUFBLG1CQUFBLEdBQ0EsT0FBQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYWluIEFwcGxpY2F0aW9uIE1vZHVsZVxyXG4gICAgICovXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwLm1haW4nLCBbXHJcbiAgICAgICAgJ2FwcC5yb3V0ZXMnLFxyXG4gICAgICAgICdhcHAuY29yZSdcclxuICAgIF0pO1xyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcC5jb3JlJyxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAqIEFuZ3VsYXIgbW9kdWxlc1xyXG4gICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAqIE91ciByZXVzYWJsZSBjcm9zcyBhcHAgY29kZSBtb2R1bGVzXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAndXRpbGl0aWVzLmFwaScsXHJcbiAgICAgICAgICAgICd1dGlsaXRpZXMuZXhjZXB0aW9uJyxcclxuICAgICAgICAgICAgJ3V0aWxpdGllcy5sb2dnZXInLFxyXG4gICAgICAgICAgICAndXRpbGl0aWVzLnJvdXRlcidcclxuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICogM3JkIFBhcnR5IG1vZHVsZXNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgXSk7XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaWNhdGlvbiByb3V0ZXNcclxuICAgICAqL1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcC5yb3V0ZXMnLCBbXHJcbiAgICAgICAgJ2pwLnNjaGVkdWxlLnJvdXRlcycsXHJcbiAgICAgICAgJ3V0aWxpdGllcy5yb3V0ZXInXHJcbiAgICBdKTtcclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgndXRpbGl0aWVzLmFwaScsIFtdKTtcclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgndXRpbGl0aWVzLmV4Y2VwdGlvbicsXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICAndXRpbGl0aWVzLmxvZ2dlcidcclxuICAgICAgICBdKTtcclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCd1dGlsaXRpZXMubG9nZ2VyJyxcclxuICAgICAgICBbXSk7XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgndXRpbGl0aWVzLnJvdXRlcicsXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICAndWkucm91dGVyJ1xyXG4gICAgICAgIF0pO1xyXG5cclxufSkoKTsiLCIvKipcclxuICpcclxuICovXHJcbihmdW5jdGlvbigpe1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2pwLnNjaGVkdWxlLmRhdGEnLCBbXHJcbiAgICAgICAgJ2FwcC5jb3JlJ1xyXG4gICAgXSk7XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnanAuc2NoZWR1bGUubGF5b3V0cycsXHJcbiAgICAgICAgW10pO1xyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTY2hlZHVsZSBSb3V0aW5nIG1vZHVsZVxyXG4gICAgICovXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnanAuc2NoZWR1bGUucm91dGVzJywgW1xyXG4gICAgICAgICd1aS5yb3V0ZXInLFxyXG4gICAgICAgICdqcC5zY2hlZHVsZS53aWRnZXRzJyxcclxuICAgICAgICAnanAuc2NoZWR1bGUubGF5b3V0cydcclxuICAgIF0pO1xyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKXtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdqcC5zY2hlZHVsZS53aWRnZXRzJywgW1xyXG4gICAgICAgICdqcC5zY2hlZHVsZS5kYXRhJ1xyXG4gICAgXSk7XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwLnBsYWNlcy5hY3Rpdml0eXNlc3Npb25zJywgW10pO1xyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb3JlIG1vZHVsZSBjb25maWd1cmF0aW9uXHJcbiAgICAgKi9cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAuY29yZScpXHJcbiAgICAgICAgLmNvbmZpZyh0b2FzdHJDb25maWcpXHJcbiAgICAgICAgLmNvbmZpZyhsb2dQcm92aWRlckNvbmZpZylcclxuICAgICAgICAuY29uZmlnKGV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlckNvbmZpZylcclxuICAgICAgICAucnVuKGluaXRDb3JlQ29tcG9uZW50cyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUb2FzdHIgQ29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtIHRvYXN0clxyXG4gICAgICogQG5nSW5qZWN0XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHRvYXN0ckNvbmZpZyh0b2FzdHIpIHtcclxuICAgICAgICB0b2FzdHIub3B0aW9ucy50aW1lT3V0ID0gNDAwMDtcclxuICAgICAgICB0b2FzdHIub3B0aW9ucy5wb3NpdGlvbkNsYXNzID0gJ3RvYXN0LWJvdHRvbS1yaWdodCc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb2cgUHJvdmlkZXIgQ29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtICRsb2dQcm92aWRlclxyXG4gICAgICogQG5nSW5qZWN0XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGxvZ1Byb3ZpZGVyQ29uZmlnKCRsb2dQcm92aWRlcikge1xyXG4gICAgICAgIGlmICgkbG9nUHJvdmlkZXIuZGVidWdFbmFibGVkKSB7XHJcbiAgICAgICAgICAgICRsb2dQcm92aWRlci5kZWJ1Z0VuYWJsZWQodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXhjZXB0aW9uIEhhbmRsZXIgUHJvdmlkZXIgY29uZmlndXJhdGlvblxyXG4gICAgICogQHBhcmFtIGV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlclxyXG4gICAgICogQG5nSW5qZWN0XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlckNvbmZpZyhleGNlcHRpb25IYW5kbGVyUHJvdmlkZXIpIHtcclxuICAgICAgICBleGNlcHRpb25IYW5kbGVyUHJvdmlkZXIuY29uZmlndXJlKCdbTkctSlAgRXJyb3JdICcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbHppZSBjb3JlIGNvbXBvbmVudHNcclxuICAgICAqIEBwYXJhbSByb3V0ZXJTZXJ2aWNlXHJcbiAgICAgKiBAbmdJbmplY3RcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaW5pdENvcmVDb21wb25lbnRzKHJvdXRlclNlcnZpY2UpIHtcclxuXHJcbiAgICB9XHJcblxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwIHJvdXRlIGNvbmZpZ3VyYXRpb25cclxuICAgICAqL1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5yb3V0ZXMnKVxyXG4gICAgICAgIC5jb25maWcocm91dGVDb25maWcpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVUktUm91dGVyIHN0YXRlIGNvbmZpZ3VyYXRpb24uXHJcbiAgICAgKiBGZWF0dXJlIHJvb3QgKGFic3RyYWN0KSByb3V0ZXMgYXJlIGFsc28gaW5jbHVkZWQuXHJcbiAgICAgKiBAcGFyYW0gJHN0YXRlUHJvdmlkZXJcclxuICAgICAqIEBwYXJhbSBTQ0hFRFVMRV9ST09UX1JPVVRFIE5vdGUgdGhhdCB0aGlzIGlzIHBhcmVudGxlc3MuXHJcbiAgICAgKiBAbmdJbmplY3RcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcm91dGVDb25maWcoJHN0YXRlUHJvdmlkZXIsIFNDSEVEVUxFX1JPT1RfUk9VVEUpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gRGVmaW5lIFJvb3QgUGFyZW50c1xyXG4gICAgICAgIFNDSEVEVUxFX1JPT1RfUk9VVEVbJ3BhcmVudCddID0gJyc7XHJcblxyXG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXHJcbiAgICAgICAgICAgIC8vIExvY2FsIFJvdXRlc1xyXG4gICAgICAgICAgICAvLyBGZWF0dXJlIFJvdXRlc1xyXG4gICAgICAgICAgICAuc3RhdGUoU0NIRURVTEVfUk9PVF9ST1VURSk7XHJcbiAgICB9XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2NoZWR1bGUgcm91dGUgY29uZmlndXJhdGlvblxyXG4gICAgICovXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnanAuc2NoZWR1bGUucm91dGVzJylcclxuICAgICAgICAuY29uZmlnKHNjaGVkdWxlUm91dGVDb25maWcpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUm91dGUgY29uZmlndXJhdGlvbixcclxuICAgICAqIHVzZXMgU0NIRURVTEVfUk9PVF9ST1VURSBhcyBhYnN0cmFjdCBwYXJlbnQgc3RhdGVcclxuICAgICAqIEBwYXJhbSAkc3RhdGVQcm92aWRlclxyXG4gICAgICogQHBhcmFtIFNDSEVEVUxFX1JPT1RfUk9VVEVcclxuICAgICAqIEBuZ0luamVjdFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBzY2hlZHVsZVJvdXRlQ29uZmlnKCRzdGF0ZVByb3ZpZGVyLCBTQ0hFRFVMRV9ST09UX1JPVVRFKVxyXG4gICAge1xyXG4gICAgICAgIC8vIFBhcmVudCBTdGF0ZSdzIG5hbWUgdG8gYmUgaW5jbHVkZWQgaW4gZXZlcnkgc3RhdGVcclxuICAgICAgICB2YXIgcGFyZW50ID0gU0NIRURVTEVfUk9PVF9ST1VURS5uYW1lO1xyXG5cclxuICAgICAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAgICAgICAvLyBMb2NhbCByb3V0ZXNcclxuICAgICAgICAgICAgLnN0YXRlKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdhY3Rpdml0aWVzJyxcclxuICAgICAgICAgICAgICAgIHBhcmVudDogcGFyZW50LFxyXG4gICAgICAgICAgICAgICAgdXJsOiAnLycsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJhcHAvY29tcG9uZW50cy9zY2hlZHVsZS9sYXlvdXQvc2NoZWR1bGUtYmFzZS1sYXlvdXQuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJTY2hlZHVsZUJhc2VDdHJsXCIsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6IFwidm1cIixcclxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhU2VydmljZTogYWN0aXZpdGllc0RhdGFTZXJ2aWNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBSb3V0ZSBSZXNvbHZlc1xyXG4gICAgICAgIGFjdGl2aXRpZXNEYXRhU2VydmljZS4kaW5qZWN0ID0gWydhY3Rpdml0aWVzRGF0YVNlcnZpY2UnXTtcclxuICAgICAgICBmdW5jdGlvbiBhY3Rpdml0aWVzRGF0YVNlcnZpY2UoYWN0aXZpdGllc0RhdGFTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhY3Rpdml0aWVzRGF0YVNlcnZpY2UubG9hZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5jb3JlJylcclxuICAgICAgICAuY29uc3RhbnQoJ3RvYXN0cicsIHRvYXN0cik7XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFQSSAobm9uLXJvdXRlKSBjb25zdGFudHNcclxuICAgICAqL1xyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJ1dGlsaXRpZXMuYXBpXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KCdBUElfQ09ORklHJyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEJBU0VfUk9VVEU6ICdhcGknXHJcbiAgICAgICAgfSk7XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQVBJIFJlc291cmNlcyBjb25zdGFudHNcclxuICAgICAqL1xyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJ1dGlsaXRpZXMuYXBpXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KCdBUElfUk9VVEVTX0NPTkZJRycsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEUk9QSU5TOiAnZHJvcGlucydcclxuICAgICAgICB9KTtcclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2NoZWR1bGUncyBhYnN0cmFjdCByb290IHJvdXRlXHJcbiAgICAgKi9cclxuICAgIGFuZ3VsYXIubW9kdWxlKFwianAuc2NoZWR1bGUucm91dGVzXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KCdTQ0hFRFVMRV9ST09UX1JPVVRFJyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxyXG4gICAgICAgICAgICBuYW1lOiAnc2NoZWR1bGUnLFxyXG4gICAgICAgICAgICB1cmw6ICcvc2NoZWR1bGUnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogXCI8ZGl2IHVpLXZpZXc+PC9kaXY+XCJcclxuICAgICAgICB9KTtcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdqcC5zY2hlZHVsZS5sYXlvdXRzJylcclxuICAgICAgICAuY29udHJvbGxlcignU2NoZWR1bGVCYXNlQ3RybCcsIFNjaGVkdWxlQmFzZUNvbnRyb2xsZXIpO1xyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gU2NoZWR1bGVCYXNlQ29udHJvbGxlcihkYXRhU2VydmljZSlcclxuICAgIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgICAgICBhY3RpdmF0ZSgpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2luaXQgc2NoZWQgYmFzZSBjdHJsJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKXtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdqcC5zY2hlZHVsZS53aWRnZXRzJylcclxuICAgICAgICAuY29udHJvbGxlcignQWN0aXZpdHlDdHJsJywgQWN0aXZpdHlDdHJsKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFjdGl2aXR5IENvbnRyb2xsZXJcclxuICAgICAqIEBwYXJhbSAkc2NvcGUgLSBTY29wZVxyXG4gICAgICogQHBhcmFtIGRhdGFTZXJ2aWNlIC0gZGF0YSBzZXJ2aWNlXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqIEBuZ0luamVjdFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBBY3Rpdml0eUN0cmwoZGF0YVNlcnZpY2UpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICAgICAgYWN0aXZhdGUoKTtcclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2bS5hY3Rpdml0aWVzID0gZGF0YVNlcnZpY2UuZHJvcGluQWN0aXZpdGllcztcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWN0aXZpdHkgQ29udHJvbGxlciBkZXBlbmRlbmNpZXNcclxuICAgICAqL1xyXG4gICAgQWN0aXZpdHlDdHJsLnJlc29sdmUgPSB7XHJcbiAgICAgICAgYWN0aXZpdGllczogYWN0aXZpdGllc1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIGFjdGl2aXRpZXMoc2NoZWR1bGVTZXJ2aWNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlU2VydmljZS5nZXREcm9waW5zKCk7XHJcbiAgICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwLnBsYWNlcy5hY3Rpdml0eXNlc3Npb25zJylcclxuICAgICAgICAuY29udHJvbGxlcignQWN0aXZpdHlTZXNzaW9uQ3RybCcsIEFjdGl2aXR5U2Vzc2lvbkN0cmwpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVwZW5kZW5jeSBJbmplY3Rpb25cclxuICAgICAqIEB0eXBlIHtzdHJpbmdbXX1cclxuICAgICAqL1xyXG4gICAgQWN0aXZpdHlTZXNzaW9uQ3RybC4kaW5qZWN0ID0gWyckc2NvcGUnLCdhY3Rpdml0eVNlc3Npb25zJ107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBY3Rpdml0eSBTZXNzaW9uIENvbnRyb2xsZXJcclxuICAgICAqIEBwYXJhbSAkc2NvcGVcclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBBY3Rpdml0eVNlc3Npb25DdHJsKCRzY29wZSlcclxuICAgIHtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaW5pdCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAkc2NvcGUuYWN0aXZpdHlTZXNzaW9ucyA9IGFjdGl2aXR5U2Vzc2lvbnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbml0KCk7XHJcbiAgICB9XHJcblxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3V0aWxpdGllcy5hcGknKVxyXG4gICAgICAgIC5mYWN0b3J5KCdhcGlTZXJ2aWNlJywgYXBpRmFjdG9yeSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcmFwcGVyIGFyb3VuZCAkaHR0cCB0aGF0IGFjdHMgYXMgdGhlIGRhdGEgcHJvdmlkZXJcclxuICAgICAqIEBwYXJhbSAkaHR0cCAtIGh0dHAgY2xpZW50XHJcbiAgICAgKiBAcGFyYW0gQVBJX0NPTkZJRyAtIEFQSSBjb25zdGFudHNcclxuICAgICAqIEByZXR1cm5zIHt7Z2V0OiBnZXQsIHBvc3Q6IHBvc3R9fSAtIGdldCBhbmQgcG9zdCBzZXJ2aWNlc1xyXG4gICAgICogQG5nSW5qZWN0XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGFwaUZhY3RvcnkoJGh0dHAsIEFQSV9DT05GSUcpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0OiBnZXQsXHJcbiAgICAgICAgICAgIHBvc3Q6IHBvc3RcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUYWtlcyBhbnkgaW5wdXQgYW5kIGNhbGxzIGEgSFRUUCBQT1NUIG9uIHRoZSBnaXZlbiByb3V0ZVxyXG4gICAgICAgICAqIEBwYXJhbSByb3V0ZSAtIFJvdXRlIGZvciBwb3N0aW5nXHJcbiAgICAgICAgICogQHBhcmFtIGlucHV0IC0gUGF5bG9hZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHBvc3Qocm91dGUsIGlucHV0KSB7XHJcbiAgICAgICAgICAgIGlmICghaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0ID0ge307XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRodHRwLnBvc3QoQVBJX0NPTkZJRy5CQVNFX1JPVVRFICsgJy8nICsgcm91dGUsIGlucHV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGxzIGEgSFRUUCBHRVQgb24gdGhlIGdpdmVuIHJvdXRlXHJcbiAgICAgICAgICogQHBhcmFtIHJvdXRlIC0gUm91dGUgdG8gZ2V0XHJcbiAgICAgICAgICogQHJldHVybnMge25nLklQcm9taXNlPFRSZXN1bHQ+fCp9IC0gUHJvbWlzZSBvZiByZXN1bHRzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0KHJvdXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoQVBJX0NPTkZJRy5CQVNFX1JPVVRFICsgJy8nICsgcm91dGUpLnRoZW4oXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocGF5bG9hZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXlsb2FkLmRhdGE7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndXRpbGl0aWVzLmV4Y2VwdGlvbicpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2V4Y2VwdGlvblNlcnZpY2UnLCBleGNlcHRpb25GYWN0b3J5KTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIGV4Y2VwdGlvbkZhY3RvcnkobG9nZ2VyU2VydmljZSkge1xyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgICBjYXRjaGVyOiBjYXRjaGVyXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhdGNoZXMgZXhjZXB0aW9ucywgbG9ncyByZWFzb24gaW50byBjb25zb2xlLlxyXG4gICAgICAgICAqIEBwYXJhbSBtZXNzYWdlXHJcbiAgICAgICAgICogQHJldHVybnMge0Z1bmN0aW9ufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGNhdGNoZXIobWVzc2FnZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXJTZXJ2aWNlLmVycm9yKG1lc3NhZ2UsIHJlYXNvbik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyYXBwZXIgYXJvdW5kIHRvYXN0clxyXG4gICAgICovXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndXRpbGl0aWVzLmxvZ2dlcicpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2xvZ2dlclNlcnZpY2UnLCBsb2dnZXJGYWN0b3J5KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlYWxzIHdpdGggcmV2ZWFsaW5nICYgbG9nZ2luZy5cclxuICAgICAqIEByZXR1cm5zIHtcclxuICAgICAqIHtzaG93VG9hc3RzOiBib29sZWFuLCBlcnJvcjogZXJyb3IsIGluZm86IGluZm8sIHN1Y2Nlc3M6IHN1Y2Nlc3MsIHdhcm5pbmc6IHdhcm5pbmcsIGxvZzogKCRsb2cubG9nfCopfX1cclxuICAgICAqIEBuZ0luamVjdFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBsb2dnZXJGYWN0b3J5KCRsb2csIHRvYXN0cikge1xyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgICBzaG93VG9hc3RzOiB0cnVlLFxyXG5cclxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxyXG4gICAgICAgICAgICBpbmZvOiBpbmZvLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBzdWNjZXNzLFxyXG4gICAgICAgICAgICB3YXJuaW5nOiB3YXJuaW5nLFxyXG5cclxuICAgICAgICAgICAgbG9nOiAkbG9nLmxvZ1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWQgZXJyb3IgdG9hc3Qgd2l0aCBhIGNyb3NzXHJcbiAgICAgICAgICogQHBhcmFtIG1lc3NhZ2VcclxuICAgICAgICAgKiBAcGFyYW0gZGF0YVxyXG4gICAgICAgICAqIEBwYXJhbSB0aXRsZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UsIGRhdGEsIHRpdGxlKSB7XHJcbiAgICAgICAgICAgIHRvYXN0ci5lcnJvcihtZXNzYWdlLCB0aXRsZSk7XHJcbiAgICAgICAgICAgICRsb2cuZXJyb3IoJ0Vycm9yOiAnICsgbWVzc2FnZSwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBMaWdodCBibHVlIHRvYXN0IHdpdGggZXhjbGFtYXRpb24gbWFya1xyXG4gICAgICAgICAqIEBwYXJhbSBtZXNzYWdlXHJcbiAgICAgICAgICogQHBhcmFtIGRhdGFcclxuICAgICAgICAgKiBAcGFyYW0gdGl0bGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBpbmZvKG1lc3NhZ2UsIGRhdGEsIHRpdGxlKSB7XHJcbiAgICAgICAgICAgIHRvYXN0ci5pbmZvKG1lc3NhZ2UsIHRpdGxlKTtcclxuICAgICAgICAgICAgJGxvZy5pbmZvKCdJbmZvOiAnICsgbWVzc2FnZSwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHcmVlbiB0b2FzdCB3aXRoIHRpY2tcclxuICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZVxyXG4gICAgICAgICAqIEBwYXJhbSBkYXRhXHJcbiAgICAgICAgICogQHBhcmFtIHRpdGxlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc3VjY2VzcyhtZXNzYWdlLCBkYXRhLCB0aXRsZSkge1xyXG4gICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhtZXNzYWdlLCB0aXRsZSk7XHJcbiAgICAgICAgICAgICRsb2cuaW5mbygnU3VjY2VzczogJyArIG1lc3NhZ2UsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVkIHRvYXN0IHdpdGggQ3Jvc3NcclxuICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZVxyXG4gICAgICAgICAqIEBwYXJhbSBkYXRhXHJcbiAgICAgICAgICogQHBhcmFtIHRpdGxlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlLCBkYXRhLCB0aXRsZSkge1xyXG4gICAgICAgICAgICB0b2FzdHIud2FybmluZyhtZXNzYWdlLCB0aXRsZSk7XHJcbiAgICAgICAgICAgICRsb2cud2FybignV2FybmluZzogJyArIG1lc3NhZ2UsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3V0aWxpdGllcy5yb3V0ZXInKVxyXG4gICAgICAgIC5mYWN0b3J5KCdyb3V0ZXJTZXJ2aWNlJywgcm91dGVyU2VydmljZSk7XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiByb3V0ZXJTZXJ2aWNlKCRzdGF0ZSwgJHJvb3RTY29wZSwgbG9nZ2VyU2VydmljZSkge1xyXG4gICAgICAgIHZhciBoYW5kbGluZ1JvdXRlQ2hhbmdlRXJyb3IgPSBmYWxzZTtcclxuICAgICAgICB2YXIgcm91dGVDb3VudHMgPSB7XHJcbiAgICAgICAgICAgIGVycm9yczogMCxcclxuICAgICAgICAgICAgY2hhbmdlczogMFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHJvdXRlcyA9IFtdO1xyXG4gICAgICAgIHZhciBnb0RlZmF1bHRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJHN0YXRlLmdvKCRzdGF0ZS4kY3VycmVudCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaW5pdCgpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBnb0RlZmF1bHRTdGF0ZTogZ29EZWZhdWx0U3RhdGVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgICAgICAgICBoYW5kbGVSb3V0ZUVycm9ycygpO1xyXG4gICAgICAgICAgICBoYW5kbGVSb3V0ZVN1Y2Nlc3NlcygpO1xyXG4gICAgICAgICAgICBoYW5kbGVSb3V0ZU5vdEZvdW5kKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVSb3V0ZU5vdEZvdW5kKCkge1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlTm90Rm91bmQnLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGV2ZW50LCB1bmZvdW5kU3RhdGUsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGluZ1JvdXRlQ2hhbmdlRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByb3V0ZUNvdW50cy5lcnJvcnMrKztcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGluZ1JvdXRlQ2hhbmdlRXJyb3IgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBMb2cgU3RhdGUgbm90IGZvdW5kXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9ICdbU3RhdGUgbm90IGZvdW5kXSBFcnJvciByb3V0aW5nIHRvICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmZvdW5kU3RhdGUudG8gKyAnIGZyb20gJyArIGZyb21TdGF0ZS5wYXJlbnQgKyAnLicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tU3RhdGUubmFtZSArICcuJztcclxuICAgICAgICAgICAgICAgICAgICBsb2dnZXJTZXJ2aWNlLndhcm5pbmcobXNnKTtcclxuICAgICAgICAgICAgICAgICAgICBnb0RlZmF1bHRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVSb3V0ZVN1Y2Nlc3NlcygpIHtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvdXRlQ291bnRzLmNoYW5nZXMrKztcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGluZ1JvdXRlQ2hhbmdlRXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlUm91dGVFcnJvcnMoKSB7XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsaW5nUm91dGVDaGFuZ2VFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJvdXRlQ291bnRzLmVycm9ycysrO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsaW5nUm91dGVDaGFuZ2VFcnJvciA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIExvZyBTdGF0ZSByb3V0aW5nIGVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9ICdbU3RhdGUgUm91dGluZyBFcnJvcl0gJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdFcnJvciByb3V0aW5nIHRvICcgKyB0b1N0YXRlICsgJyBmcm9tICcgKyBmcm9tU3RhdGUgKyAnLicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnIEVycm9yOiAnICsgZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyU2VydmljZS53YXJuaW5nKG1zZywgW2Vycm9yXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ29EZWZhdWx0U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTsiLCIoZnVuY3Rpb24oKXtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdqcC5zY2hlZHVsZS5kYXRhJylcclxuICAgICAgICAuZmFjdG9yeSgnc2NoZWR1bGVTZXJ2aWNlJywgc2NoZWR1bGVGYWN0b3J5KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb3ZpZGVzIGFjdGl2aXRpZXMgYW5kIHRoZWlyIGFjdGl2aXR5IHNlc3Npb25zXHJcbiAgICAgKiBAcGFyYW0gYXBpU2VydmljZVxyXG4gICAgICogQHBhcmFtIEFQSV9ST1VURVNfQ09ORklHXHJcbiAgICAgKiBAcGFyYW0gZXhjZXB0aW9uU2VydmljZVxyXG4gICAgICogQHJldHVybnMge3tnZXREcm9waW5zOiBnZXREcm9waW5zLCBnZXRBY3Rpdml0eVNlc3Npb25zOiBnZXRBY3Rpdml0eVNlc3Npb25zfX1cclxuICAgICAqIEBuZ0luamVjdFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBzY2hlZHVsZUZhY3RvcnkoYXBpU2VydmljZSwgQVBJX1JPVVRFU19DT05GSUcsIGV4Y2VwdGlvblNlcnZpY2UpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0RHJvcGluczogZ2V0RHJvcGlucyxcclxuICAgICAgICAgICAgZ2V0QWN0aXZpdHlTZXNzaW9uczogZ2V0QWN0aXZpdHlTZXNzaW9uc1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHJpZXZlcyBhbGwgYWN0aXZpdHkgc2Vzc2lvbnMgZm9yIGEgZ2l2ZW4gYWN0aXZpdHlcclxuICAgICAgICAgKiBAcGFyYW0gYWN0aXZpdHlJZCAtIEFjdGl2aXR5IElkXHJcbiAgICAgICAgICogQHJldHVybnMge25nLklQcm9taXNlPFRSZXN1bHQ+fCp9IC0gUHJvbWlzZSBvZiBhY3Rpdml0eSBzZXNzaW9uc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFjdGl2aXR5U2Vzc2lvbnMoYWN0aXZpdHlJZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXBpU2VydmljZVxyXG4gICAgICAgICAgICAgICAgLmdldChBUElfUk9VVEVTX0NPTkZJRy5EUk9QSU5TICsgJy8nICsgYWN0aXZpdHlJZClcclxuICAgICAgICAgICAgICAgIC50aGVuKGdldEFjdGl2aXR5U2Vzc2lvbnNDb21wbGV0ZSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChleGNlcHRpb25TZXJ2aWNlLmNhdGNoZXIoJ1hIUiBGYWlsZWQgZm9yIGdldEFjdGl2aXR5U2Vzc2lvbnMnKSk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRBY3Rpdml0eVNlc3Npb25zQ29tcGxldGUoYWN0aXZpdHlTZXNzaW9ucykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2aXR5U2Vzc2lvbnM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHJpZXZlcyBhbGwgZHJvcGluIGFjdGl2aXRpZXNcclxuICAgICAgICAgKiBAcmV0dXJucyB7bmcuSVByb21pc2U8VFJlc3VsdD58Kn0gLSBQcm9taXNlIG9mIGFjdGl2aXRpZXNcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBnZXREcm9waW5zKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXBpU2VydmljZVxyXG4gICAgICAgICAgICAgICAgLmdldChBUElfUk9VVEVTX0NPTkZJRy5EUk9QSU5TKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZ2V0RHJvcGluc0NvbXBsZXRlKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGV4Y2VwdGlvblNlcnZpY2UuY2F0Y2hlcignWEhSIEZhaWxlZCBmb3IgZ2V0RHJvcGlucycpKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldERyb3BpbnNDb21wbGV0ZShhY3Rpdml0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aXZpdGllcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGF0YSBTZXJ2aWNlIG9iamVjdCB0byByZXRyaWV2ZSBkYXRhIGZvclxyXG4gICAgICogYWN0aXZpdGllcyBDb250cm9sbGVyXHJcbiAgICAgKi9cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdqcC5zY2hlZHVsZS53aWRnZXRzJylcclxuICAgICAgICAgICAgLmZhY3RvcnkoJ2FjdGl2aXRpZXNEYXRhU2VydmljZScsIGFjdGl2aXRpZXNEYXRhRmFjdG9yeSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRyaWV2ZXMgZGF0YSBmb3IgYWN0aXZpdGllcyBDb250cm9sbGVyXHJcbiAgICAgKiBAcGFyYW0gJHFcclxuICAgICAqIEBwYXJhbSBzY2hlZHVsZVNlcnZpY2VcclxuICAgICAqIEByZXR1cm5zIHt7bG9hZDogbG9hZH19XHJcbiAgICAgKiBAbmdJbmplY3RcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gYWN0aXZpdGllc0RhdGFGYWN0b3J5KCRxLCBzY2hlZHVsZVNlcnZpY2UpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbG9hZDogbG9hZFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIFJldHJpZXZlcyBhbGwgZGF0YSBhbmQgcmV0dXJucyBhbiBvYmplY3RcclxuICAgICAgICAvLyBFLmcuIHtcclxuICAgICAgICAvLyAgICAgICAgICBpdGVtMTogaXRlbTEsXHJcbiAgICAgICAgLy8gICAgICAgICAgaXRlbTI6IGl0ZW0yXHJcbiAgICAgICAgLy8gICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gbG9hZCgpIHtcclxuICAgICAgICAgICAgdmFyIGRyb3BpbkFjdGl2aXRpZXMgPSBzY2hlZHVsZVNlcnZpY2UuZ2V0RHJvcGlucygpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICRxLmFsbChbZHJvcGluQWN0aXZpdGllc10pLnRoZW4oXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbihyZXN1bHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGRyb3BpbkFjdGl2aXRpZXM6IHJlc3VsdHNbMF1cclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2pwLnNjaGVkdWxlLndpZGdldHMnKVxyXG4gICAgICAgIC5kaXJlY3RpdmUoJ3NjaGVkdWxlJywganBTY2hlZHVsZUFjdGl2aXR5KTtcclxuXHJcbiAgICBmdW5jdGlvbiBqcFNjaGVkdWxlQWN0aXZpdHkoKVxyXG4gICAge1xyXG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImFwcC9jb21wb25lbnRzL3NjaGVkdWxlL3dpZGdldHMvYWN0aXZpdGllcy9hY3Rpdml0aWVzLnRtcGwuaHRtbFwiXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcclxuICAgIH1cclxuXHJcblxyXG59KSgpOyIsIi8vIEluY2x1ZGUgaW4gaW5kZXguaHRtbCBzbyB0aGF0IGFwcCBsZXZlbCBleGNlcHRpb25zIGFyZSBoYW5kbGVkLlxyXG4vLyBTaG91bGQgZXhjbHVkZSBmcm9tIHRlc3QgcnVubmVyXHJcbihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndXRpbGl0aWVzLmV4Y2VwdGlvbicpXHJcbiAgICAgICAgLnByb3ZpZGVyKCdleGNlcHRpb25IYW5kbGVyJywgZXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyKVxyXG4gICAgICAgIC5jb25maWcoY29uZmlnKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE11c3QgY29uZmlndXJlIHRoZSBleGNlcHRpb24gaGFuZGxpbmdcclxuICAgICAqIEByZXR1cm4ge1t0eXBlXX1cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyKCkge1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgICBhcHBFcnJvclByZWZpeDogdW5kZWZpbmVkXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5jb25maWd1cmUgPSBmdW5jdGlvbiAoYXBwRXJyb3JQcmVmaXgpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuYXBwRXJyb3JQcmVmaXggPSBhcHBFcnJvclByZWZpeDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtjb25maWc6IHRoaXMuY29uZmlnfTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uZmlndXJlIGJ5IHNldHRpbmcgYW4gb3B0aW9uYWwgc3RyaW5nIHZhbHVlIGZvciBhcHBFcnJvclByZWZpeC5cclxuICAgICAqIEFjY2Vzc2libGUgdmlhIGNvbmZpZy5hcHBFcnJvclByZWZpeCAodmlhIGNvbmZpZyB2YWx1ZSkuXHJcbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICRwcm92aWRlXHJcbiAgICAgKiBAcmV0dXJuIHtbdHlwZV19XHJcbiAgICAgKiBAbmdJbmplY3RcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY29uZmlnKCRwcm92aWRlKSB7XHJcbiAgICAgICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckZXhjZXB0aW9uSGFuZGxlcicsIGV4dGVuZEV4Y2VwdGlvbkhhbmRsZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXh0ZW5kIHRoZSAkZXhjZXB0aW9uSGFuZGxlciBzZXJ2aWNlIHRvIGFsc28gZGlzcGxheSBhIHRvYXN0LlxyXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSAkZGVsZWdhdGVcclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gZXhjZXB0aW9uSGFuZGxlclxyXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBsb2dnZXJTZXJ2aWNlXHJcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGRlY29yYXRlZCAkZXhjZXB0aW9uSGFuZGxlciBzZXJ2aWNlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGV4dGVuZEV4Y2VwdGlvbkhhbmRsZXIoJGRlbGVnYXRlLCBleGNlcHRpb25IYW5kbGVyLCBsb2dnZXJTZXJ2aWNlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV4Y2VwdGlvbiwgY2F1c2UpIHtcclxuICAgICAgICAgICAgdmFyIGFwcEVycm9yUHJlZml4ID0gZXhjZXB0aW9uSGFuZGxlci5jb25maWcuYXBwRXJyb3JQcmVmaXggfHwgJyc7XHJcbiAgICAgICAgICAgIHZhciBlcnJvckRhdGEgPSB7ZXhjZXB0aW9uOiBleGNlcHRpb24sIGNhdXNlOiBjYXVzZX07XHJcbiAgICAgICAgICAgIGV4Y2VwdGlvbi5tZXNzYWdlID0gYXBwRXJyb3JQcmVmaXggKyBleGNlcHRpb24ubWVzc2FnZTtcclxuICAgICAgICAgICAgJGRlbGVnYXRlKGV4Y2VwdGlvbiwgY2F1c2UpO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQ291bGQgYWRkIHRoZSBlcnJvciB0byBhIHNlcnZpY2UncyBjb2xsZWN0aW9uLFxyXG4gICAgICAgICAgICAgKiBhZGQgZXJyb3JzIHRvICRyb290U2NvcGUsIGxvZyBlcnJvcnMgdG8gcmVtb3RlIHdlYiBzZXJ2ZXIsXHJcbiAgICAgICAgICAgICAqIG9yIGxvZyBsb2NhbGx5LiBPciB0aHJvdyBoYXJkLlxyXG4gICAgICAgICAgICAgKiB0aHJvdyBleGNlcHRpb247XHJcbiAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAgICAgICAqICAgICB0aHJvdyB7IG1lc3NhZ2U6ICdlcnJvciBtZXNzYWdlIHdlIGFkZGVkJyB9O1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgbG9nZ2VyU2VydmljZS5lcnJvcihleGNlcHRpb24ubWVzc2FnZSwgZXJyb3JEYXRhKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==